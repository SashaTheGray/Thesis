#!/bin/bash

# -----------------------------------###----------------------------------- #
#                                  THESIS                                   #
#                               ------------                                #
#                       A personal forward operating base                   #
#                           and a Head in the Clouds                        #
# -----------------------------------###----------------------------------- #
#                                MIT License                                #
#                                                                           #
# Copyright (c) 2022 Alexander Robertson                                    #
#                                                                           #
# Permission is hereby granted, free of charge, to any person obtaining     #
# a copy of this software                                                   #
# and associated documentation files (the "Software"),                      #
# to deal in the Software without restriction, including without limitation #
# the rights to use, copy, modify, merge, publish, distribute, sublicense,  #
# and/or sell copies of the Software, and to permit persons to whom         #
# the Software is furnished to do so, subject to the following conditions:  #
#                                                                           #
# The above copyright notice and this permission notice shall be included   #
# in all copies or substantial portions of the Software.                    #
#                                                                           #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,           #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO                          #
# THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE       #
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS   #
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,                      #
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,        #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE                                 #
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                             #
# -----------------------------------###----------------------------------- #
#                             TABLE OF CONTENTS                             #
#                          -----------------------                          #
#               ~.      Functions                                           #
#               I.      Determening system's package manager                #
#               II.     Install packages                                    #
#               III.    Stow symlinks                                       #
#               IV.     Setup zsh                                           #
# -----------------------------------###----------------------------------- #

# ------------ #
# ~. FUNCTIONS #
# ------------ #

###################################################
# Echo signed and colored notifications.          #
#                                                 #
# Arguments:                                      #
#   type        -   operation | success | failure #
#   message     -   message to echo               #
#   indent      -   true | false -> default=false #
###################################################
notify ()
{
    # Parse arguments.
    local type=${1:-""}
    local message=${2:-""}
    local indent=${3:-false}

    # Colours.
    local blue="\033[0;34m"
    local green="\033[1;32m"
    local red="\033[0;31m"
    local no_color="\033[0m"
    
    # Config.
    local colour="NONE"
    local sign="NONE"
    
    # Deduce color and sign for the notification.
    case "$type" in
        "operation")
            colour=$blue
            sign="[*] "
        ;;
        "success") 
            colour=$green
            sign="[+] "
        ;;
        "failure") 
            colour=$red
            sign="[-] "
        ;;
        *) 
            colour=$no_color
            sign=""
        ;;
    esac
    
    # Echo notification.
    if [ $indent = true ];
    then
        echo -e "\t$colour$sign$message$no_color"
    else
        echo -e "$colour$sign$message$no_color"
    fi
    
}


# ------------------------------------- #
# I. DETERMINE SYSTEM'S PACKAGE MANAGER #
# ------------------------------------- #

# Require su-privileges for the program.
sudo echo "--- THESIS ---"

# Declare a system -> package manager associative array.
declare -A PM_LOOKUP=(
    [/etc/debian_version]="apt"
)

# Determine package manager.
PACKAGE_MANAGER="NONE"

notify operation "Thesis is determining system's package manager"
for file in ${!PM_LOOKUP[@]};
do
    if [[ -f $file ]]; then
        PACKAGE_MANAGER=${PM_LOOKUP[$file]}
        notify success "Found $PACKAGE_MANAGER" true
        break
    fi
done

# Abort if no suitable package manager was found.
if [ $PACKAGE_MANAGER = "NONE" ]; then
    notify failure "Cannot determine system's package manager" true
    notify failure "Aborting installation ..."
    echo "--- THESIS ---"
    exit 1
fi

# -------------------- #
# II. INSTALL PACKAGES #
# -------------------- #

PACKAGES=(
    git         # Version control system.
    zsh         # Shell alternative.
    tmux        # Terminal multiplexer.
    stow        # Symlink farm.
    bat         # A better cat command.
    fzf         # Fuzzy finder.
    unzip	    # Extraction tool.
    nodejs      # Javascript runtime.
    npm         # Node package manager.
    cargo       # Rust package manager.
)

notify \
    operation \
    "Thesis is installing ${#PACKAGES[@]} $PACKAGE_MANAGER packages"

# Associatice array for package manager installation commands.
declare -A PMIC=(
    [apt]="sudo apt-get -y install"
)

# Install packages.
PACKAGES_LEN=${#PACKAGES[@]}
for (( i=0; i<$PACKAGES_LEN; i++ ));
do
    # Install package.
    eval "${PMIC[$PACKAGE_MANAGER]} ${PACKAGES[$i]}" &> /dev/null
    
    # Check if installation was successful.
    which ${PACKAGES[$i]} &> /dev/null
    if [ $? -eq 0 ]; then type=success; else type=failure; fi
    
    # Notify success scenario.
    notify $type "${PACKAGES[$i]} \t($(( $i + 1 ))/$PACKAGES_LEN)" true
done

# Install pip packages.
PIP_PACKAGES=(
    black       # Python code formatter.
    flake8      # Python code linter.
    beautysh    # Bash code formatter.
)

echo "[*] Thesis is installing ${#PIP_PACKAGES[@]} pip packages ..."
for package in ${PIP_PACKAGES[@]};
do
    echo "[*] Thesis is installing $package"
    pip3 install $package &> /dev/null
done

# Install npm packages.
NPM_PACKAGES=(
    prettier
)
echo "[*] Thesis is installing ${#NPM_PACKAGES[@]} npm packages"

for package in ${NPM_PACKAGES[@]};
do
    echo "[*] Thesis is installing $package"
    npm install -g $package &> /dev/null
done

# Install cargo packages.
CARGO_PACKAGES=(
    stylua
)
echo "[*] Thesis is installing ${#CARGO_PACKAGES[@]} cargo packages"
for package in ${CARGO_PACKAGES[@]};
do
    echo "[*] Thesis is installing $package"
    cargo install $package &> /dev/null
done

# Install neovim.
echo "[*] Thesis is installing neovim"

# Set the appimage source and destination.
NEOVIM_SOURCE="https://github.com/neovim/neovim/releases/latest/download/nvim.appimage"
IMAGE_DESTINATION=$HOME/.local/bin
IMAGE_NAME=nvim
IMAGE=$IMAGE_DESTINATION/$IMAGE_NAME

# Download image and make it executeable.
curl -s -L $NEOVIM_SOURCE > $IMAGE
chmod u+x $IMAGE > /dev/null

echo "[*] Thesis installed neovim"
echo "[+] Thesis finished installing packages"

# ------------------ #
# III. STOW SYMLINKS #
# ------------------ #

# ------------- #
# IV. SETUP ZSH #
# ------------- #

echo "[*] Thesis is setting up ZSH"

if [ "$SHELL" != "/usr/bin/zsh" ] ; then
    
    # Get path of the zsh executable.
    zsh_path=$(which zsh)

    # Change shell for $USER to zsh.
    sudo chsh -s $zsh_path $USER
    
    # Explictly set the current shell as zsh.
    export SHELL=$zsh_path
fi

echo "[*] Thesis finished configuring ZSH"
echo "--- THESIS ---"
